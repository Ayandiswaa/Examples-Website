[
  {
    "objectID": "final_examples/sql_example.html",
    "href": "final_examples/sql_example.html",
    "title": "Finding Andie MacDowell’s Filmography",
    "section": "",
    "text": "In this example we are going to use SQL functions to find Andie MacDowell’s Filmography\nFirst we use the IMDB websiite to find information on her id which is similar across different movies, knowing that names are lsited by last name first, a comma then first name\n\n\n\nSELECT name.name, name.id\nFROM name AS name\nWHERE name LIKE '%MacDowell, Andie%'\n \n\n\n1 records\n\n\nname\nid\n\n\n\n\nMacDowell, Andie\n3479179\n\n\n\n\n\nMacDowell Andie’s ID is 3479179\nTo find Andie’s filmography we use certain SQL functons such as joining by her ID from her roles in movies to other character names information. I arranged movies by chronological order of production year\n\n\n\nSELECT t.title, t.production_year, cn.name, ci.role_id, ci.person_id\nFROM  cast_info AS ci\nJOIN title t  ON ci.movie_id  = t.id \nJOIN  char_name cn ON cn.id = ci.person_role_id\nWHERE ci.person_id = 3479179\nAND  t.kind_id = 1\nORDER BY t.production_year ;\n\n\nDisplaying records 1 - 5\n\n\n\n\n\n\n\n\n\ntitle\nproduction_year\nname\nrole_id\nperson_id\n\n\n\n\nGreystoke: The Legend of Tarzan, Lord of the Apes\n1984\nMiss Jane Porter\n2\n3479179\n\n\nSt. Elmo’s Fire\n1985\nDale Biberman\n2\n3479179\n\n\nSex, Lies, and Videotape\n1989\nAnn Bishop Mullany\n2\n3479179\n\n\nGreen Card\n1990\nBrontÃ«\n2\n3479179\n\n\nThe Object of Beauty\n1991\nTina\n2\n3479179\n\n\n\n\n\nI learned a lot from this piece; how to use a range of SQL functions such ORDER BY, WHERE, SELECT, JOIN, FROM and more to find interesting information from big sets of data available to the public. I found it interesting how much these SQL functions are similar to R functions such as select(), filter(), join and more.\nI love this piece because it is shows how we can use SQL to answer fun questions we have, related to hobbies such as watching movies."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Hello!\nI took a class of Introduction to Data Science during my second semester in college. I have really enjoyed the class and I feel I have learnt a lot from it including ethics concerning the Data Science field. I love Economics and I enjoy learning about the way people interact with external factors that range from social to environmental to political and more. R allows me to do analysis, wrangle big sets of data using functions such as filter, make tables and other data visualizations that are accessible to the public from the Economics field.\nThis website displays the skills that I have gained from being in this skill focusing on data wrangling, SQL in conjuction with R and mapping. I have picked three of my favorite projects as these display how much R can be useful in organizing and displaying data to get valuable pieces of information of course with ethics of data collection and analysis in mind.\nI hope you learn a lot as you navigate this website!!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "My name is Britney Nathans. My photo is from here.\nQualifications\nBachelor of Science in Data Science (2027)\n\n\nIf you would like to contact me please do so at 023-456-7870"
  },
  {
    "objectID": "final_examples/final_lab7.html",
    "href": "final_examples/final_lab7.html",
    "title": "Monarch Watch",
    "section": "",
    "text": "An Interactive Map\nThis bit of code will bring in the image of a butterfly, so we can make our map pretty\n\nbutterfly_icon <- makeIcon(\n  iconUrl = \"monarch-butterfly.png\",\n  iconWidth = 9.6, iconHeight = 9.6,\n  iconAnchorX = 0, iconAnchorY = 0)\n\nAdd two sets for markers one for the individual sightings in butterfly_location_data and one for the Mexico locations, use the big icons for the wintering homes\n\nleaflet() |>\n  addTiles() |>\n  addMarkers(data= butterfly_location_data , \n             lat = ~lat,\n             lng = ~long,\n             icon = butterfly_icon\n             )|>\n  \n  # Add a popup with the number of butterflies counted for mexico. \n  addCircleMarkers(data = butterfly_location_data,\n                   popup = ~as.character(butterfly_location_data$city_location),\n                   radius = 6) |>\n  \n  addMarkers(data= Mexico_locations , \n             lat = ~lat,\n             lng = ~long,\n             icon = butterfly_icon\n             )|>\n  \n  # Add a popup with the number of butterflies counted for mexico. \n  addCircleMarkers(data = Mexico_locations,\n                   popup = ~as.character(Mexico_locations$location),\n                   radius = 15)\n\nAssuming \"long\" and \"lat\" are longitude and latitude, respectively\n\n\nWarning in validateCoords(lng, lat, funcName): Data contains 3 rows with either\nmissing or invalid lat/lon values and will be ignored\n\nWarning in validateCoords(lng, lat, funcName): Data contains 3 rows with either\nmissing or invalid lat/lon values and will be ignored\n\n\nAssuming \"long\" and \"lat\" are longitude and latitude, respectively\n\n\nWarning in validateCoords(lng, lat, funcName): Data contains 25 rows with\neither missing or invalid lat/lon values and will be ignored\n\n\nWarning in validateCoords(lng, lat, funcName): Data contains 25 rows with\neither missing or invalid lat/lon values and will be ignored\n\n\n\n\n\n\n\nThis map gives an interesting picture of where this type of citizen science is actually happening. We’ll play with leaflet more on Monday."
  },
  {
    "objectID": "final_examples/final_lab7.html#import-and-clean-data",
    "href": "final_examples/final_lab7.html#import-and-clean-data",
    "title": "Monarch Watch",
    "section": "Import and Clean Data",
    "text": "Import and Clean Data\nThe reporting data is available online in the form of google sheets. It can be brought into R with the googlesheets4 R package. Pay attention to your console, google needs permission to download.\n\ninstall.packages(\"googlesheets4\")\n\nInstalling package into '/Users/atsabedze/R/x86_64-pc-linux-gnu-library/4.3'\n(as 'lib' is unspecified)\n\n# US and Canada Data\nUS_CAN_Recovery_2022 <- read_csv(\"Monarch Watch 2022 Season Tag Recoveries - Domestic - domestic-recoveries-2022.csv\")\n\nRows: 862 Columns: 8\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): Tag Code, Date, City/Location, State/Province, ZIP/PC, Country, Fir...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Mexico Recovery Data\nPre_2023_Mexico_Recovery <- read_csv(\"Monarch Watch Tag Recoveries - Central Mexico - mexico-recoveries.csv\")\n\nRows: 21347 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Tag Code, Location\ndbl (1): Report Season\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# If you cannot get acces to the above data run these two lines in the console. Otherwise ignore this message\n #googlesheets4::gs4_deauth()\n #googlesheets4::gs4_auth()\n\n# The code below takes both of these dataframes and makes them into a list. \n\ndata_frame_list <- list(US_CAN_Recovery_2022, Pre_2023_Mexico_Recovery)\n\nThere is an R object called a list. A list can store different types of objects like data frames, vectors, character values, etc.\nList can be handy for storing and retrieving data. We will make a list called butterfly_dataframes and use it to do some data analysis.\n\n# We need to clean the data we downloaded from google sheets. We can use clean_names() to do this. Since there are two dataframes we can clean them both at once. Use map() to do so. \n\n# Iterate over your function to clean the names and store the three dataframes as a list. \nbutterfly_dataframes <- map(\n  .x = data_frame_list,\n  .f = clean_names \n)\n\n# At the moment butterfly_dataframes is unnamed which is inconvient so below I'm naming all the dataframes in the list.  \n\nnames(butterfly_dataframes) <-   c( \"US_CAN_Recovery_2022\", \"Pre_2023_Mexico_Recovery\")\n\nNow work with the list butterfly_dataframes. To access the element in the list you want use the $.\n\n# glimpse just one of the dataframes with $\n\nview(butterfly_dataframes$US_CAN_Recovery_2022)\n\nI’d like to trace the paths of these butterflies on a map of the US. Each butterfly has a tag. So if the same tag is repeated multiple times we can follow its path.\nWrangle US_CAN_Recovery to get the top 7 most spotted butterflies 2022. The use pull() to save the most spotted tag codes as a vector so we can use it to filter later.\n\ntop_7_most_spotted_2022 <- butterfly_dataframes$US_CAN_Recovery_2022  |>\n  count(tag_code) |>\n  arrange(desc(n)) |>\n  slice_head(n = 7) |>\n  pull(tag_code)\n\nview(top_7_most_spotted_2022)\n\nTo map the butterfly sightings we need the location data for the top 7 butterflies. filter() for the top seven most seen butteflies, pipe that into select() to get the location of the city and state and finally pipe that information into geocode(). It takes geocode() sometime to produce lat and long data. Make sure your filtering works as expected before using geocode(). This will give us the lat and long on the city level.\n\ntop_7_butterfly <- butterfly_dataframes$US_CAN_Recovery_2022 |>\nfilter(tag_code %in% top_7_most_spotted_2022)  |> \nselect(tag_code,city_location, state_province) |>\ngeocode(city = city_location, state = state_province )\n\nPassing 10 addresses to the Nominatim single address geocoder\n\n\nQuery completed in: 10 seconds\n\n#c(\"AGPH255\", \"AACW276\", \"AGAT569\", \"AGBA262\", \"AGST163\", \"AGWJ751\", \"AGXM335\")\n\n\n# I made the US state map for you.\n\nUSA_map <-  maps::map(\"state\", plot = FALSE, fill = TRUE) |> st_as_sf(coords = c(\"x\", \"y\"), crs = 4326)\n\nPlot the map to make sure the lower 48 states are shown. Examine USA_map and become familiar with it.\n\n# Map out USA_map here.\nggplot()+\n  geom_sf(data = USA_map)\n\n\n\n\nIn the code chunk below add your top 7 butterflies, be sure to jitter them and make them orange.\n\n# Make your top 7 butterfly map here. \nggplot()+\n  geom_sf(data = USA_map) +\n  geom_jitter(data =  top_7_butterfly, aes(x = long, y = lat, label = tag_code), colour = \"orange\")\n\nWarning in geom_jitter(data = top_7_butterfly, aes(x = long, y = lat, label =\ntag_code), : Ignoring unknown aesthetics: label\n\n\n\n\n\nThis is not an exciting map, I only see 7ish dots, not seven butterflies travelling south. This shows the limits of citizen science. Not many people participate so the data is spotty."
  },
  {
    "objectID": "final_examples/final_lab7.html#make-a-chrolopleth-map-of-the-us-and-canada.",
    "href": "final_examples/final_lab7.html#make-a-chrolopleth-map-of-the-us-and-canada.",
    "title": "Monarch Watch",
    "section": "Make a Chrolopleth map of the US and Canada.",
    "text": "Make a Chrolopleth map of the US and Canada.\nLet’s see what we can learn when we plot all of the butterflies from 2022 at the same time. Let’s code it by the state level, as opposed to the city level to save time. Getting location at the state level will take geocode() 43 seconds instead of 8 minutes at the city level. Once you geocode your data you can use save() to save the data, and load() to load it back in when you render. You should comment out the geocoding and save function afterward, uncomment the load().\n\n butterfly_location_data <- butterfly_dataframes$US_CAN_Recovery_2022 |>\n   select(tag_code,city_location,state_province,country, date)|>\n   geocode(state = state_province, country = country)\n\nPassing 42 addresses to the Nominatim single address geocoder\n\n\nQuery completed in: 42.1 seconds\n\nsave(butterfly_location_data, file = \"butterfly_location_data_city.Rdata\")\n \nload(\"butterfly_location_data_city.Rdata\")\n\nWe would expect locations in the US with more people to have more sightings. So instead of plotting the overall sightings we’ll make a Chloropleth map that colors the sightings by state as a percentage of the total sightings.\nWe have to wrangle the data a bit. Make a df called butterfly_location_summary wrangle to find the following:\n\nThe total number of sightings per state\nThe total number of sightings in 2022\nThe proportion for each state\n\nThen we need to join our data frame with USA_map to get the location data. I made a states df that has the states names and abbreviations in it to help with joining.\n\njoin the states df to the butter_location_summary\njoin the new df made above to USA_map, be sure to have US map on the left so you don’t lose simple features.\n\n\n# Wrangle your data\nbutterfly_location_summary <- butterfly_location_data |>\n   group_by(state_province) |>\n   summarise(\n          total = nrow(x=butterfly_location_data),\n          total_sightings = n(),\n          proportion = (total_sightings/total)*100\n          )\n\n\n# Here is a df with state abreviation and names\nstates<- as.data.frame(cbind(abrev = state.abb, lower_state = tolower(state.name), upper_state = state.name))\n\n#First join\nbutterfly_map <- left_join(x = butterfly_location_summary, y = states, by = c(\"state_province\" = \"abrev\"))\n\n#Second join  Inner join to get the location data. Call the resulting dataframe USA_map_joined.\nUSA_map_joined <- inner_join(x = USA_map, y = butterfly_map, by = c(\"ID\" = \"lower_state\"))\n\nGreat! Let’s make our map. Also pick the “YlOrRd” color palette, the default one doesn’t conjure up images of Monarchs. Make sure darker means more. I added some themes to make things nicer\n\n# Make map here.\nggplot()+\n  geom_sf(data = USA_map_joined, aes(fill = total_sightings ))+\n  labs(title = \"Monarch Sightings\",\n       fill = \"Percentage Sightings\")+\n  \n  # The code below set a color palette and changes the background color. Orange colors for butterflys and light blue for the background the make the points pop. I also turned off the grid lines.\n  scale_fill_distiller(palette = \"YlOrRd\", direction = \"up\")+\n  theme(\n  axis.text = element_blank(),\n  axis.line = element_blank(),\n  axis.ticks = element_blank(),\n  panel.grid = element_blank()) +\n  \n  \n  # I added the following themes you can change them or leave them the same.\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"azure2\",\n                                colour = \"black\",\n                                size = 0.5),\n    panel.grid.major = element_blank(), \n    panel.grid.minor = element_blank())\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\n\n\nThe above map doesn’t normalize for the population of each state. Notice that Texas, NY, NJ,Virginia, and Ohio are darker because more people live there. So they are more likely to see butterflies. To illustrate this run the chunk below of the total number of observations to see that the map is the same.\n\nUSA_map_joined|>\n  ggplot()+\n  geom_sf(aes(fill= proportion)) +\n  \n  # The code below set a color palette and changes the background color. Orange colors for butterflys and light blue for the background the make the points pop. I also turned off the grid lines. \n  \n  scale_fill_distiller(palette = \"YlOrRd\", direction = 1) +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"azure2\",\n                                colour = \"black\",\n                                size = 0.5),\n    panel.grid.major = element_blank(), \n    panel.grid.minor = element_blank())\n\n\n\n\nI’d like a map that shows the proportion of sightings based on the population of each state. Use get_acs() from tidycensus to get the state population for the states (choose geography =“state”). Then join with the USA_map_joined to make a normalized proportion by state population.\nGive the map below a descriptive title and a caption stating where the data came from remove the latitude and longitude by setting axis.text = element_blank() in theme (see notes from previous classes).\n\n# I'm bringing in the population bby state data for you. \n\nUS_pop <- \n  tidycensus::get_acs(\n    # arguements here, you want all states, not just Mass like we did in class.\n    geography = \"state\", \n    variables = \"B01003_001\"\n  ) |>\n  mutate(NAME = tolower(NAME))\n\nGetting data from the 2018-2022 5-year ACS\n\n\nWarning: • You have not set a Census API key. Users without a key are limited to 500\nqueries per day and may experience performance limitations.\nℹ For best results, get a Census API key at\nhttp://api.census.gov/data/key_signup.html and then supply the key to the\n`census_api_key()` function to use it throughout your tidycensus session.\nThis warning is displayed once per session.\n\n# Join the population data with USA_map_joined Call the resulting dataframe US_tot_pop\n\nUS_tot_pop <- inner_join(x = USA_map_joined, y = US_pop , by = c(\"ID\" = \"NAME\") )|>\n  #make a coloumn that has a proportion for the sighting by population. \n  mutate(pop_sightings_prop = (total_sightings/estimate))\n \n\n# Make your new map here. \nggplot()+\n  geom_sf(data = US_tot_pop, aes(fill = pop_sightings_prop))+\n  labs(title = \"Proportion of Sightings in Each State by Population\",\n       caption = \"Data is from tidycensus\",\n       fill = \"Sightings/State Population\")+\n\n\n  \n  # The code below set a color palette and changes the background color. Orange colors for butterflys and light blue for the background the make the points pop. I also turned off the grid lines. \n  scale_fill_distiller(palette = \"YlOrRd\" ,direction = 1)+\n  \n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"azure2\",\n                                colour = \"black\",\n                                size = 0.5),\n    panel.grid.major = element_blank(), \n    panel.grid.minor = element_blank(),\n    axis.text = element_blank()\n    \n    )\n\n\n\n\nQuestion: What does the above map show? It shows that population size affects total sightings. Big states had a larger number of sighting but when we factored in the size of state population, they had a smaller proportion of sighitings. Maine had the largest proportion of sightings followed by Minnesota, Iowa and Nebraska."
  },
  {
    "objectID": "final_examples/final_lab7.html#an-interactive-map",
    "href": "final_examples/final_lab7.html#an-interactive-map",
    "title": "Monarch Watch",
    "section": "An Interactive Map",
    "text": "An Interactive Map\nWe’ll use leaflet to make a map showing the location of all of the sightings in 2022.\nThese butterflys end up in Mexico for the winter. Using Pre_2023_Mexico_Recovery data\n\nfilter for 2022 data\nadd a column that is called Mexico and is the word “Mexico” repeated.\nadd a column that is the count of the number of sightings in each location.\nThen geocode by state and country.\n\n\nMexico_locations <- butterfly_dataframes$Pre_2023_Mexico_Recovery |>\n  filter(report_season == \"2022\")|>\n  group_by(location)|>\n  summarize(sightings_count = n()) |>\n  mutate(Mexico = \"Mexico\") |>\n    # We need to ungroup our data before we geocode it. \n  ungroup()|>\n  geocode(state = location , country = Mexico)\n\nPassing 7 addresses to the Nominatim single address geocoder\n\n\nQuery completed in: 7 seconds\n\n\nI ran the location by city, and it took 8 minutes. You should be able to load in the data. I’ve left my code for geocoding, just so you can see it. You don’t need it.\n\n#If you choose to do this I recommend you save the data then load it as necessary. After saving the data comment the code below. If you want to use the geocoding my state, that's fine too. \n #butterfly_location_data_8min <- butterfly_dataframes$US_CAN_Recovery_2022 |>\n    #select(tag_code,city_location,state_province,country, date)|>\n    #geocode(city = city_location, state = state_province, country = country)\n\n#save(butterfly_location_data_8min, file = \"butterfly_location_data_8min.Rdata\")\n\n# Make sure butterfly_location_data_8min shows in the environment after loading.  \n#load(\"eight_minute_data.Rdata\")\n\nMake a map of mexico.\n\nMexico_map <-  maps::map(region = \"Mexico\", plot = FALSE, fill = TRUE) |> st_as_sf(coords = c(\"x\", \"y\"), crs = 4326)\n\nggplot()+\n  geom_sf(data = Mexico_map)\n\n\n\n\nThis bit of code will bring in the image of a butterfly, so we can make our map pretty. You can see this file in your files.\n\nbutterfly_icon <- makeIcon(\n  iconUrl = \"monarch-butterfly.png\",\n  iconWidth = 9.6, iconHeight = 9.6,\n  iconAnchorX = 0, iconAnchorY = 0)\n\nAdd two sets for markers one for the individual sightings in butterfly_location_data and one for the Mexico locations, use the big icons for the wintering homes. Figure out which arguments need to go into the addMarkers() functions.\n\nleaflet() |>\n  addTiles() |>\n  addMarkers(data= butterfly_location_data , \n             lat = ~lat,\n             lng = ~long,\n             icon = butterfly_icon\n             )|>\n  \n  # Add a popup with the number of butterflies counted for mexico. \n  addCircleMarkers(data = butterfly_location_data,\n                   popup = ~as.character(butterfly_location_data$city_location),\n                   radius = 6) |>\n  \n  addMarkers(data= Mexico_locations , \n             lat = ~lat,\n             lng = ~long,\n             icon = butterfly_icon\n             )|>\n  \n  # Add a popup with the number of butterflies counted for mexico. \n  addCircleMarkers(data = Mexico_locations,\n                   popup = ~as.character(Mexico_locations$location),\n                   radius = 15)\n\nAssuming \"long\" and \"lat\" are longitude and latitude, respectively\n\n\nWarning in validateCoords(lng, lat, funcName): Data contains 3 rows with either\nmissing or invalid lat/lon values and will be ignored\n\nWarning in validateCoords(lng, lat, funcName): Data contains 3 rows with either\nmissing or invalid lat/lon values and will be ignored\n\n\nAssuming \"long\" and \"lat\" are longitude and latitude, respectively\n\n\nWarning in validateCoords(lng, lat, funcName): Data contains 25 rows with\neither missing or invalid lat/lon values and will be ignored\n\n\nWarning in validateCoords(lng, lat, funcName): Data contains 25 rows with\neither missing or invalid lat/lon values and will be ignored\n\n\n\n\n\n\n\nThis map gives an interesting picture of where this type of citizen science is actually happening. We’ll play with leaflet more on Monday."
  },
  {
    "objectID": "final_examples/final_lab_8.html",
    "href": "final_examples/final_lab_8.html",
    "title": "Querying a MySQL database",
    "section": "",
    "text": "SQL is a longstanding database querying language. It is a loosely-implemented standard. We will be using MySQL.\nTo facilitate our connection to the MySQL database server, we will need to install the RMySQL package.\n\n# do NOT install RMySQL if you are on the RStudio Server\ninstall.packages(\"RMySQL\")\n\n\nlibrary(tidyverse)\nlibrary(RMySQL)\ndb <- dbConnect(\n  MySQL(),\n  host = \"scidb.smith.edu\",\n  user = \"sds192\",\n  password = \"DSismfc@S\",\n  dbname = \"imdb\"\n  )\nknitr::opts_chunk$set(connection= 'db', max.print = 5)\n\nThis chunk of code will allow you to connect to scidb. Note that this creates a database connection object named db, which has the class MySQLConnection.\n\nclass(db)\n\n[1] \"MySQLConnection\"\nattr(,\"package\")\n[1] \"RMySQL\"\n\n\n\nExercise:\nFind Andie MacDowell’s id in the name table.\n\nNote: that names are listed last name first and seperated by a comma (eg Murray, Bill)\n\n\n\n\nSELECT name.name, name.id\nFROM name AS name\nWHERE name LIKE '%MacDowell, Andie%'\n \n\n\n1 records\n\n\nname\nid\n\n\n\n\nMacDowell, Andie\n3479179\n\n\n\n\n\nMacDowell Andie’s ID is 3479179\n\nSELECT *\nFROM cast_info\nWHERE movie_id = 3664274;\n\n\nDisplaying records 1 - 5\n\n\n\n\n\n\n\n\n\n\n\nid\nperson_id\nmovie_id\nperson_role_id\nnote\nnr_order\nrole_id\n\n\n\n\n118176\n17392\n3664274\n376\nNA\n43\n1\n\n\n1764292\n232622\n3664274\n352541\n(uncredited)\nNA\n1\n\n\n2746369\n354870\n3664274\n191351\nNA\n13\n1\n\n\n3167452\n400710\n3664274\n140101\nNA\n34\n1\n\n\n4584838\n577860\n3664274\n98\n(uncredited)\nNA\n1\n\n\n\n\n\n\nDESCRIBE cast_info\n\n\nDisplaying records 1 - 5\n\n\nField\nType\nNull\nKey\nDefault\nExtra\n\n\n\n\nid\nint\nNO\nPRI\nNA\nauto_increment\n\n\nperson_id\nint\nNO\nMUL\nNA\n\n\n\nmovie_id\nint\nNO\nMUL\nNA\n\n\n\nperson_role_id\nint\nYES\nMUL\nNA\n\n\n\nnote\ntext\nYES\n\nNA\n\n\n\n\n\n\n\n\n\nSELECT n.name, ci.role_id\nFROM cast_info AS ci\nJOIN name AS n ON n.id = ci.person_id\nWHERE ci.person_id = 3479179;\n\n\nDisplaying records 1 - 5\n\n\nname\nrole_id\n\n\n\n\nMacDowell, Andie\n2\n\n\nMacDowell, Andie\n2\n\n\nMacDowell, Andie\n2\n\n\nMacDowell, Andie\n2\n\n\nMacDowell, Andie\n2\n\n\n\n\n\n\nSELECT n.name, ci.role_id\nFROM cast_info AS ci\nJOIN name n ON n.id = ci.person_id\nWHERE movie_id = 3664274;\n\n\nDisplaying records 1 - 5\n\n\nname\nrole_id\n\n\n\n\nAdler, Roger\n1\n\n\nBlakeslee, Douglas\n1\n\n\nCampbell, Ken Hudson\n1\n\n\nChaiyabhat, Shaun\n1\n\n\nDeGuide, Tony\n1\n\n\n\n\n\n\n\nSELECT n.name, ci.role_id, cn.name\nFROM cast_info ci\nJOIN name n ON n.id = ci.person_id\nJOIN char_name cn ON cn.id = ci.person_role_id\nWHERE ci.person_id = 3479179;\n\n\nDisplaying records 1 - 5\n\n\nname\nrole_id\nname\n\n\n\n\nMacDowell, Andie\n2\nHerself\n\n\nMacDowell, Andie\n2\nHerself - Presenter\n\n\nMacDowell, Andie\n2\nHerself - audience member\n\n\nMacDowell, Andie\n2\nHerself\n\n\nMacDowell, Andie\n2\nHelen Kalahan\n\n\n\n\n\n\n\nSELECT t.title, t.production_year, cn.name, ci.role_id, ci.person_id\nFROM  cast_info AS ci\nJOIN title t  ON ci.movie_id  = t.id \nJOIN  char_name cn ON cn.id = ci.person_role_id\nWHERE ci.person_id = 3479179\nAND  t.kind_id = 1\nORDER BY t.production_year ;\n\n\nDisplaying records 1 - 5\n\n\n\n\n\n\n\n\n\ntitle\nproduction_year\nname\nrole_id\nperson_id\n\n\n\n\nGreystoke: The Legend of Tarzan, Lord of the Apes\n1984\nMiss Jane Porter\n2\n3479179\n\n\nSt. Elmo’s Fire\n1985\nDale Biberman\n2\n3479179\n\n\nSex, Lies, and Videotape\n1989\nAnn Bishop Mullany\n2\n3479179\n\n\nGreen Card\n1990\nBrontÃ«\n2\n3479179\n\n\nThe Object of Beauty\n1991\nTina\n2\n3479179"
  },
  {
    "objectID": "Readme.html",
    "href": "Readme.html",
    "title": "My page",
    "section": "",
    "text": "# For your final project you will build a website displaying three pieces that show off:\nYou do not need to make new versions of these things. You can just move the files into this new project you’ve created. If you have kept organized this should be quick. If you have not kept organized remember that your github repos have your work in them. You are welcome to make new data pieces, but don’t spend to much time on that."
  },
  {
    "objectID": "Readme.html#you-will-get-two-outcomes-from-this-project",
    "href": "Readme.html#you-will-get-two-outcomes-from-this-project",
    "title": "My page",
    "section": "You will get two outcomes from this project:",
    "text": "You will get two outcomes from this project:\n\nYou will learn a bit about how to publish a website on the internet.\nYou will understand the filing structure that R (and all programming languages) use."
  },
  {
    "objectID": "Readme.html#requirements",
    "href": "Readme.html#requirements",
    "title": "My page",
    "section": "Requirements:",
    "text": "Requirements:\n\nAll your wrangling, SQL and mapping files must be individual files on different webpages. They must be rendered to html.\nFor each bit you must reflect on what you learned or why you like a particular piece (200 words max).\nYour website will have 5 pages minimum:\n\nLanding page - this will describe the class, what you did, your thoughts on it, and what the website contains, its a summary. You can add a bit about yourself, but no identifying information. Saying Intro to Data Science is okay, but you shouldn’t mention Smith College.\nOne page per data piece.\nAn about page so people can contact you to hire you (Add a different photo to the fake contact page). You can not add identifying info here.\n\nYou will make use of the nav bar.\nYour website should look professional use any of the skills from 192 or 100. Consider headers and links.\nYour website must be pushed to github and turned on and working. So please test it. When you are done submit the link to your site to the forum on moodle."
  },
  {
    "objectID": "Readme.html#optional",
    "href": "Readme.html#optional",
    "title": "My page",
    "section": "Optional:",
    "text": "Optional:\n\nHere is the website for quarto websites.\nChange the theme of your website.\nCustomize your website using ideas from here."
  },
  {
    "objectID": "Readme.html#a-few-things-to-note",
    "href": "Readme.html#a-few-things-to-note",
    "title": "My page",
    "section": "A few things to note:",
    "text": "A few things to note:\n\nI am meant to protect your identity as students, so please do not put your personal information on the website. Use the made up contact information for your contact. Don’t even say Smith College. Remember even if you pages are public your repos are private.\nAfter your website is graded, I’ll turn them off. If you would like you can turn them on and do whatever you want with it. Keep in mind when you graduate from Smith you’ll lose your Smith email and likely your repo/website. But you’ll still have them as files on your computer.\nThis is meant to be a simple skill that students last semester wished they knew how to do. It should not be very very time consuming. Make something that meet requirements then move on. You can perfect it over the summer."
  },
  {
    "objectID": "final_examples/mapping_example.html",
    "href": "final_examples/mapping_example.html",
    "title": "Monarch Watch",
    "section": "",
    "text": "Every year Monarch Butterflies fly south for the winter. They start in higher latitudes in the US and migrate south to their wintering areas in Mexico. I used maps and leaflets to illustrate this."
  },
  {
    "objectID": "final_examples/wrangling_example.html",
    "href": "final_examples/wrangling_example.html",
    "title": "Stop, Question and Frisk 2011 Data Analysis",
    "section": "",
    "text": "In this example I use Stop, Question and Frisk 2011 Data from the New York Police Department to get information if there is possible discrimination by police officers in the way they stop citizens.\nI add two new columns. The first should indicate whether a weapon was found, and the second should indicate whether an arrest/summons was made.\n\nsqf_2011 <- \n  sqf_2011 |>\n  #Add a variable for weapon found\n  mutate(wpnfound = case_when(pistol == 1 |\n                               riflshot == 1 | \n                               asltweap == 1 |\n                               knifcuti == 1 | \n                               machgun == 1 | \n                               othrweap == 1 ~ 1,\n                             TRUE ~ 0))\nsqf_2011 <- \n  sqf_2011 |>\n  #Add a variable for arrest made or summons issued\n  mutate(arrestsumm = case_when(sumissue == 1 | \n                                arstmade == 1 ~ 1,\n                               TRUE ~ 0))\n\nSelect the variables needed\n\nsqf_2011 <-\n  sqf_2011 |>\n  select(frisked, arrestsumm,arstmade, wpnfound, race_cat, age)\n\nCalculating the number of steps\n\ntotal_stops <-\n  sqf_2011 |>\n  summarize(Count = n()) |>\n  pull()\n\ntotal_stops\n\n[1] 685724\n\n\nHow many stops were there per race in 2011? What percentage of stops per race in 2011? Arrange by number of stops in descending order\n\ntotal_stops_race_recorded <-\n  sqf_2011 |>\n  #Subset to rows where race_cat is not NA or \"OTHER\"\n  filter(race_cat != is.na(race_cat) & race_cat != \"OTHER\") |> \n  summarize(Count = n()) |>\n  pull()\n\nsqf_2011_stops <- \n  sqf_2011 |>\n  #Subset to rows where race_cat is not NA or \"OTHER\"\n  filter(race_cat != is.na(race_cat) & race_cat != \"OTHER\") |> \n  #Group by race\n  group_by(race_cat) |> \n  #Calculate number of observations\n  summarize(stops = n(), \n            percent_stops = n() / total_stops_race_recorded * 100) |>\n  #Sort by stops in descending order\n  arrange(desc(stops)) \n\npct is an abbreviation for percent\n\ntotal_stops_race_recorded <-\n  sqf_2011 |>\n  #Subset to rows where race_cat is not NA or \"OTHER\"\n  filter(race_cat != is.na(race_cat) & race_cat != \"OTHER\") |> \n  summarize(Count = n()) |>\n  pull()\n\nsqf_2011_analysis <- \n  sqf_2011 |>\n  #Subset to rows where race_cat is not NA or \"OTHER\"\n  filter(race_cat != is.na(race_cat) & race_cat != \"OTHER\") |> \n  #Group by race\n  group_by(race_cat) |> \n  #Calculate number of observations\n  summarize(stops = n(), \n            pct_stops = n() / total_stops_race_recorded * 100, \n            pct_frisked = sum(frisked)/stops*100,\n            pct_wpnfound = sum(sqf_2011$wpnfound, na.rm = TRUE)/stops*100,\n            pct_arrestsumm = sum(arrestsumm)/stops*100) |>\n  #Sort by stops in descending order\n  arrange(desc(stops)) \n\nsqf_2011_analysis |>\n  kable()\n\n\n\n \n  \n    race_cat \n    stops \n    pct_stops \n    pct_frisked \n    pct_wpnfound \n    pct_arrestsumm \n  \n \n\n  \n    BLACK \n    350743 \n    52.8930792 \n    57.85575 \n    2.237821 \n    11.50501 \n  \n  \n    WHITE-HISPANIC \n    175302 \n    26.4360588 \n    56.69816 \n    4.477416 \n    11.87437 \n  \n  \n    WHITE \n    61805 \n    9.3203763 \n    44.23752 \n    12.699620 \n    13.07176 \n  \n  \n    BLACK-HISPANIC \n    48438 \n    7.3045933 \n    58.46649 \n    16.204220 \n    11.71188 \n  \n  \n    ASIAN/PACIFIC ISLANDER \n    23932 \n    3.6090162 \n    47.05833 \n    32.797092 \n    11.84189 \n  \n  \n    AMERICAN INDIAN/ALASKAN NATIVE \n    2897 \n    0.4368761 \n    49.36141 \n    270.935451 \n    11.25302 \n  \n\n\n\n\n\nI chose this piece for data wrangling because I felt it gave me information about an important; discrimation.I learned that drivers in New York City are stopped and frisked by police officers disproportionately based on their race. An excessive amount of Black individuals and White Hispanic individuals in New York are stopped by the police compared to other race categories such as white and American Indian/Alaskan Native.\nThe races have similar percentage of people in each race arrested or a summoned issued which means that there might be discrimination involved. This implies that in order to prevent police officers from discriminating against certain marginalised groups because of their own biases, the NYC Police Department needs to implement stricter and more uniform policies. I was also able to create visualizations that show this."
  },
  {
    "objectID": "final_examples/mapping_example.html#an-interactive-map",
    "href": "final_examples/mapping_example.html#an-interactive-map",
    "title": "Monarch Watch",
    "section": "An Interactive Map",
    "text": "An Interactive Map\nThis bit of code will bring in the image of a butterfly, so we can make our map pretty\n\nbutterfly_icon <- makeIcon(\n  iconUrl = \"monarch-butterfly.png\",\n  iconWidth = 9.6, iconHeight = 9.6,\n  iconAnchorX = 0, iconAnchorY = 0)\n\nUse two markers one for sightings in the US and a second larger one for wintering home of these butterflies\n\nleaflet() |>\n  addTiles() |>\n  addMarkers(data= butterfly_location_data , \n             lat = ~lat,\n             lng = ~long,\n             icon = butterfly_icon\n             )|>\n  \n  # Add a popup with the number of butterflies counted for mexico. \n  addCircleMarkers(data = butterfly_location_data,\n                   popup = ~as.character(butterfly_location_data$city_location),\n                   radius = 6) |>\n  \n  addMarkers(data= Mexico_locations , \n             lat = ~lat,\n             lng = ~long,\n             icon = butterfly_icon\n             )|>\n  \n  # Add a popup with the number of butterflies counted for mexico. \n  addCircleMarkers(data = Mexico_locations,\n                   popup = ~as.character(Mexico_locations$location),\n                   radius = 15)\n\n\n\n\n\n\nI learned a lot in this mapping example including how to make maps of the United States as well as other countries. I also learned how to use markers and icons to present interactive map information in an attractive and informational manner such differentiating sizes of icons.\nI chose this piece because it presents information in a beautiful way to make the audience want to know information presented by this map. It also shows that mapping skills can be used to analyze more than human behavior and can be used analyze animal behavior as well"
  }
]